2thread synchronixzation
-------------------------

#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t mutex;

void* thread(void* arg)
{
     sem_wait(&mutex);
    printf("\nEntered critical section..\n");

    //critical section sode
    sleep(4);

    //signal
    printf("\nJust Exiting critical section...\n");
    sem_post(&mutex);


int main()
{
    sem_init(&mutex, 0, 1);
    pthread_t t1,t2;
    pthread_create(&t1,NULL,thread,NULL);
//    sleep(2);
    pthread_create(&t2,NULL,thread,NULL);
    pthread_join(t1,NULL);
    pthread_join(t2,NULL);
    sem_destroy(&mutex);
    return 0;
}


reader-writer
------------
#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>

sem_t mutex,writeblock;
int data = 0,rcount = 0;

void *reader(void *arg)
{
        int f;
        f = ((int)arg);
        sem_wait(&mutex);
        rcount = rcount + 1;
        printf("\nReader %d has arrived \n",f);
        if(rcount==1)
                sem_wait(&writeblock);
        sem_post(&mutex);
        printf("\nReader Entered %d Data read by the reader is %d\n",f,data);
        sleep(4);
        sem_wait(&mutex);
        rcount = rcount - 1;
        printf("\nReader Exiting : %d Remaining Readers:%d \n",f,rcount);

        if(rcount==0)
        {
                printf("\nNo readers Writers can write\n");
                sem_post(&writeblock);
        }
        sem_post(&mutex);
}

void *writer(void *arg)
{
        int f;
        f = ((int) arg);
        printf("\nWriter %d has arrived\n",f);
        sem_wait(&writeblock);
        data++;
        printf("\nWriter Entered %d Data writen by the writer is %d\n",f,data);
        sleep(2);
        printf("\nWriter Exiting : %d\n",f);
        sem_post(&writeblock);
}
main()
{
        int i,b;
        pthread_t rtid[5],wtid[5];
        sem_init(&mutex,0,1);
        sem_init(&writeblock,0,1);
        for(i=0;i<=2;i++)
        {
                pthread_create(&wtid[i],NULL,writer,(void *)i);
                sleep(2);
                pthread_create(&rtid[i],NULL,reader,(void *)i);
        }
        for(i=0;i<=2;i++)
        {
                pthread_join(wtid[i],NULL);
                pthread_join(rtid[i],NULL);
        }
}


barber
------
#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <pthread.h>
#include <unistd.h>

sem_t waiting_room_mutex;
sem_t barber_room_mutex;
sem_t barber_chair_free;
sem_t barber;
sem_t customers;
sem_t cutting;

int waiting_chairs_free = 3;
int barber_room_chairs_free = 3;

int barber_chair_states[3]={0};

void* customer(){
        sem_wait(&waiting_room_mutex);
        if(waiting_chairs_free==0){
                printf("Waiting room full! Leaving\n");
                sem_post(&waiting_room_mutex);
                return NULL;
        }
        waiting_chairs_free--;
        sem_post(&waiting_room_mutex);

        while(1){
                sem_wait(&barber_room_mutex);
                if(barber_room_chairs_free==0){
                        sem_post(&barber_room_mutex);
                        continue;
                }
                sem_wait(&waiting_room_mutex);
                waiting_chairs_free++;
                sem_post(&waiting_room_mutex);
                barber_room_chairs_free--;
                sem_post(&barber_room_mutex);
                break;
        }
        sem_post(&customers);
        sem_wait(&barber);
        printf("Starting haircut\n");
        sleep(1); /* hair cut */
        printf("Ending haircut\n");
        sem_post(&cutting);
        return NULL;
}

void* barber_fn(){
        while(1){
                sem_wait(&customers);
                sem_wait(&cutting);
                sem_wait(&barber_room_mutex);
                barber_room_chairs_free++;
                sem_post(&barber_room_mutex);
                sem_post(&barber);
        }
}

int main(){
        sem_init(&waiting_room_mutex, 0, 1);
        sem_init(&barber_room_mutex, 0, 1);
        sem_init(&barber, 0, 1);
        sem_init(&customers, 0, 0);
        sem_init(&cutting, 0, 0);

        pthread_t b, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10;

        pthread_create(&b, NULL, barber_fn, (void*)&b);
        pthread_create(&c1, NULL, customer, (void*)&c1);
        pthread_create(&c2, NULL, customer, (void*)&c2);
        pthread_create(&c3, NULL, customer, (void*)&c3);
        pthread_create(&c4, NULL, customer, (void*)&c4);
        sleep(2);
        pthread_create(&c5, NULL, customer, (void*)&c5);
        pthread_create(&c6, NULL, customer, (void*)&c6);
        pthread_create(&c7, NULL, customer, (void*)&c7);
        pthread_create(&c8, NULL, customer, (void*)&c8);
        pthread_create(&c9, NULL, customer, (void*)&c9);
        pthread_create(&c10, NULL, customer, (void*)&c10);

        pthread_join(c1,NULL);
        pthread_join(c2,NULL);
        pthread_join(c3,NULL);
        pthread_join(c4,NULL);
        pthread_join(c5,NULL);
        pthread_join(c6,NULL);
        pthread_join(c7,NULL);
        pthread_join(c8,NULL);
        pthread_join(c9,NULL);
        pthread_join(c10,NULL);
}


car tunnel
----------

#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NORTH 1
#define SOUTH 2
#define CARS 1

sem_t northCars, southCars;

void* tunnel(void * arg)
{
        int dir = *(int *)arg;
        // printf("%d\n", dir);

        if(dir == NORTH)
                sem_wait(&southCars);
        else
                sem_wait(&northCars);

        printf("\n %d : Entered \n", *(int*)arg);

        // critical section

        sleep(3);

        printf("\n %d : Exited \n", *(int*)arg);

        if(dir == NORTH)
                sem_post(&southCars);
        else
                sem_post(&northCars);
}

int main()
{

        sem_init(&northCars, 0, CARS);
        sem_init(&southCars, 0, CARS);

        pthread_t n1, n2, n3, s1, s2, s3;

        int movement1 = 1, movement2 = 2;
        int* dir1 = &movement1, *dir2 = &movement2;

        pthread_create(&n1, NULL, tunnel, (void *) dir1);
        pthread_create(&n2, NULL, tunnel, (void *) dir1);
        pthread_create(&n3, NULL, tunnel, (void *) dir1);
        pthread_create(&s1, NULL, tunnel, (void *) dir2);
        pthread_create(&s2, NULL, tunnel, (void *) dir2);
        pthread_create(&s3, NULL, tunnel, (void *) dir2);

        pthread_join(n1, NULL);
        pthread_join(n2, NULL);
        pthread_join(n3, NULL);
        pthread_join(s1, NULL);
        pthread_join(s2, NULL);
        pthread_join(s3, NULL);

        sem_destroy(&northCars);
        sem_destroy(&southCars);

        return 0;
}


pipe
----
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>
void main()
{
        int forkresult;

        printf("I am the parent. Remember My Process-id! : %d\n", getpid());
        printf("Parent now going to fork ... \n");

        forkresult=fork();

        if(forkresult==-1)
        {
                printf("Fork failed\n");
                exit(0);
        }
        else if(forkresult!=0)
        {
                printf("Parent will execute this code\n");
                printf("Parent prints:My child's pid is %d\n", forkresult);
                wait(NULL);
                printf("Parent executes pwd\n");
                execlp("pwd","pwd",NULL);
                printf("This line gets printed when the above exec statement pwd fails\n");
        }
        else
        {
                printf("Hi ! I am the child with process-id %d.\n",getpid());
                printf("I'm now going to execute ls!\n\n\n");
                execlp ("ls", "ls", NULL);
                printf ("Child prints %d: AAAAH ! ! My EXEC failed ! ! ! !\n", getpid());
                exit(1);
        }
        printf ("Process id %d prints : like father like son. \n", getpid());
}




------------------







